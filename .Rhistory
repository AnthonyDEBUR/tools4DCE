# bilan dans l'ensemble des données eau brute
donnees<-analyses_AEP%>%subset(CdStationMesureEauxSurface%in%stations_AEP[stations_AEP$Type=="EAU BRUTE", ]$CdStationMesureEauxSurface & CdParametre%in%liste_pest_2020_ARS56$CdParametre)
seuils<-makeSeuils(CdParametre=donnees$CdParametre%>%unique, specificites=NA, type_seuil = "AEP")
bilan<-groupe_tableau_distribution(donnees, col_CdSupport=NULL, col_CdFraction=NULL, col_CdUnite=NULL, seuils = seuils)
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée")
#'
#' @return la fonction renvoie un objet ggplot avec le graphique de distribution
#'
#' @examples donnees<-data.frame(parametres=rep(c("1301", "1340", "1335"), 100), RsAna=sample(0.1:100, 300, replace=TRUE), LqAna=c(0.5,1,6))
#' @examples donnees<-donnees%>%mutate(RsAna=ifelse(RsAna<LqAna, LqAna, RsAna))
#' @examples donnees<-donnees%>%mutate(CdRqAna=ifelse(RsAna>LqAna, "1", ifelse(sample(1:100,5)>10,"10","1")))
#' @examples seuils<-makeSeuils(CdParametre=donnees$parametres%>%unique, specificites=c("CYPRINICOLE", rep(NA,2)), type_seuil = "DCE")
#' @examples tableau<-groupe_tableau_distribution(donnees, col_CdParametre="parametres", col_CdSupport=NULL, col_CdFraction=NULL, col_CdUnite=NULL, seuils = seuils)
#' @examples graphDCE_distribution(tableau)
#' @export
graphDCE_distribution<-function(donnees, titre="", legende_LQ=c("NON QUANTIFIE", "QUANTIFIE")){
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(aes(label=..count..),stat='count',position=position_fill(vjust=0.5))
return(graph)
}
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée")
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(aes(label=nb),stat='count',position=position_fill(vjust=0.5))
#'
#' @return la fonction renvoie un objet ggplot avec le graphique de distribution
#'
#' @examples donnees<-data.frame(parametres=rep(c("1301", "1340", "1335"), 100), RsAna=sample(0.1:100, 300, replace=TRUE), LqAna=c(0.5,1,6))
#' @examples donnees<-donnees%>%mutate(RsAna=ifelse(RsAna<LqAna, LqAna, RsAna))
#' @examples donnees<-donnees%>%mutate(CdRqAna=ifelse(RsAna>LqAna, "1", ifelse(sample(1:100,5)>10,"10","1")))
#' @examples seuils<-makeSeuils(CdParametre=donnees$parametres%>%unique, specificites=c("CYPRINICOLE", rep(NA,2)), type_seuil = "DCE")
#' @examples tableau<-groupe_tableau_distribution(donnees, col_CdParametre="parametres", col_CdSupport=NULL, col_CdFraction=NULL, col_CdUnite=NULL, seuils = seuils)
#' @examples graphDCE_distribution(tableau)
#' @export
graphDCE_distribution<-function(donnees, titre="", legende_LQ=c("NON QUANTIFIE", "QUANTIFIE")){
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(aes(label=nb),stat='count',position=position_fill(vjust=0.5))
return(graph)
}
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée")
#'
#' @return la fonction renvoie un objet ggplot avec le graphique de distribution
#'
#' @examples donnees<-data.frame(parametres=rep(c("1301", "1340", "1335"), 100), RsAna=sample(0.1:100, 300, replace=TRUE), LqAna=c(0.5,1,6))
#' @examples donnees<-donnees%>%mutate(RsAna=ifelse(RsAna<LqAna, LqAna, RsAna))
#' @examples donnees<-donnees%>%mutate(CdRqAna=ifelse(RsAna>LqAna, "1", ifelse(sample(1:100,5)>10,"10","1")))
#' @examples seuils<-makeSeuils(CdParametre=donnees$parametres%>%unique, specificites=c("CYPRINICOLE", rep(NA,2)), type_seuil = "DCE")
#' @examples tableau<-groupe_tableau_distribution(donnees, col_CdParametre="parametres", col_CdSupport=NULL, col_CdFraction=NULL, col_CdUnite=NULL, seuils = seuils)
#' @examples graphDCE_distribution(tableau)
#' @export
graphDCE_distribution<-function(donnees, titre="", legende_LQ=c("NON QUANTIFIE", "QUANTIFIE")){
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(donnees, aes(label=nb),stat='count',position=position_fill(vjust=0.5))
return(graph)
}
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée")
#'
#' @return la fonction renvoie un objet ggplot avec le graphique de distribution
#'
#' @examples donnees<-data.frame(parametres=rep(c("1301", "1340", "1335"), 100), RsAna=sample(0.1:100, 300, replace=TRUE), LqAna=c(0.5,1,6))
#' @examples donnees<-donnees%>%mutate(RsAna=ifelse(RsAna<LqAna, LqAna, RsAna))
#' @examples donnees<-donnees%>%mutate(CdRqAna=ifelse(RsAna>LqAna, "1", ifelse(sample(1:100,5)>10,"10","1")))
#' @examples seuils<-makeSeuils(CdParametre=donnees$parametres%>%unique, specificites=c("CYPRINICOLE", rep(NA,2)), type_seuil = "DCE")
#' @examples tableau<-groupe_tableau_distribution(donnees, col_CdParametre="parametres", col_CdSupport=NULL, col_CdFraction=NULL, col_CdUnite=NULL, seuils = seuils)
#' @examples graphDCE_distribution(tableau)
#' @export
graphDCE_distribution<-function(donnees, titre="", legende_LQ=c("NON QUANTIFIE", "QUANTIFIE")){
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor, label=nb))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(stat='count',position=position_fill(vjust=0.5))
return(graph)
}
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée")
#'
#' @return la fonction renvoie un objet ggplot avec le graphique de distribution
#'
#' @examples donnees<-data.frame(parametres=rep(c("1301", "1340", "1335"), 100), RsAna=sample(0.1:100, 300, replace=TRUE), LqAna=c(0.5,1,6))
#' @examples donnees<-donnees%>%mutate(RsAna=ifelse(RsAna<LqAna, LqAna, RsAna))
#' @examples donnees<-donnees%>%mutate(CdRqAna=ifelse(RsAna>LqAna, "1", ifelse(sample(1:100,5)>10,"10","1")))
#' @examples seuils<-makeSeuils(CdParametre=donnees$parametres%>%unique, specificites=c("CYPRINICOLE", rep(NA,2)), type_seuil = "DCE")
#' @examples tableau<-groupe_tableau_distribution(donnees, col_CdParametre="parametres", col_CdSupport=NULL, col_CdFraction=NULL, col_CdUnite=NULL, seuils = seuils)
#' @examples graphDCE_distribution(tableau)
#' @export
graphDCE_distribution<-function(donnees, titre="", legende_LQ=c("NON QUANTIFIE", "QUANTIFIE")){
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor, label=nb))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(stat='identity',position=position_fill(vjust=0.5))
return(graph)
}
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée")
#'
#' @return la fonction renvoie un objet ggplot avec le graphique de distribution
#'
#' @examples donnees<-data.frame(parametres=rep(c("1301", "1340", "1335"), 100), RsAna=sample(0.1:100, 300, replace=TRUE), LqAna=c(0.5,1,6))
#' @examples donnees<-donnees%>%mutate(RsAna=ifelse(RsAna<LqAna, LqAna, RsAna))
#' @examples donnees<-donnees%>%mutate(CdRqAna=ifelse(RsAna>LqAna, "1", ifelse(sample(1:100,5)>10,"10","1")))
#' @examples seuils<-makeSeuils(CdParametre=donnees$parametres%>%unique, specificites=c("CYPRINICOLE", rep(NA,2)), type_seuil = "DCE")
#' @examples tableau<-groupe_tableau_distribution(donnees, col_CdParametre="parametres", col_CdSupport=NULL, col_CdFraction=NULL, col_CdUnite=NULL, seuils = seuils)
#' @examples graphDCE_distribution(tableau)
#' @export
graphDCE_distribution<-function(donnees, titre="", legende_LQ=c("NON QUANTIFIE", "QUANTIFIE")){
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(data=donnees%>%subset(nb>5), aes(x=nb, y=parametre, label=nb),stat='identity',position=position_fill(vjust=0.5))
return(graph)
}
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée")
# ajout d'une colonne pour savoir si on doit afficher les étiquettes de valeurs
seuil_param<-donnees%>%group_by(parametre)%>%summarise(sum(nb))
#' @param min_affiche : pourcentage minimum à atteindre pour que la valeur soit affiché (ex si min_affiche=0.3, seules le nb de prélèvements représentant au moins 30% pour une categorie et un paramètre sera affiché)
#' @return la fonction renvoie un objet ggplot avec le graphique de distribution
#'
#' @examples donnees<-data.frame(parametres=rep(c("1301", "1340", "1335"), 100), RsAna=sample(0.1:100, 300, replace=TRUE), LqAna=c(0.5,1,6))
#' @examples donnees<-donnees%>%mutate(RsAna=ifelse(RsAna<LqAna, LqAna, RsAna))
#' @examples donnees<-donnees%>%mutate(CdRqAna=ifelse(RsAna>LqAna, "1", ifelse(sample(1:100,5)>10,"10","1")))
#' @examples seuils<-makeSeuils(CdParametre=donnees$parametres%>%unique, specificites=c("CYPRINICOLE", rep(NA,2)), type_seuil = "DCE")
#' @examples tableau<-groupe_tableau_distribution(donnees, col_CdParametre="parametres", col_CdSupport=NULL, col_CdFraction=NULL, col_CdUnite=NULL, seuils = seuils)
#' @examples graphDCE_distribution(tableau)
#' @export
graphDCE_distribution<-function(donnees, titre="", legende_LQ=c("NON QUANTIFIE", "QUANTIFIE"), affiche_valeurs=T, min_affiche=0.1){
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
# ajout d'une colonne pour savoir si on doit afficher les étiquettes de valeurs
seuil_param<-donnees%>%group_by(parametre)%>%summarise(total=sum(nb))
donnees<-donnees%>%left_join(seuil_param, by="parametre")
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(data=donnees%>%subset(nb>min_affiche*total), aes(x=nb, y=parametre, label=nb),stat='identity',position=position_fill(vjust=0.5))
return(graph)
}
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée")
View(bilan)
View(donnees)
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
donnees<-bilan
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
# ajout d'une colonne pour savoir si on doit afficher les étiquettes de valeurs
seuil_param<-donnees%>%group_by(parametre)%>%summarise(total=sum(nb))
View(seuil_param)
# ajout d'une colonne pour savoir si on doit afficher les étiquettes de valeurs
seuil_param<-donnees%>%group_by(parametre)%>%summarise_by(total=sum(nb))
# ajout d'une colonne pour savoir si on doit afficher les étiquettes de valeurs
seuil_param<-donnees%>%group_by(parametre)%>%dplyr::summarise(total=sum(nb))
seuil_param
donnees<-donnees%>%left_join(seuil_param, by="parametre")
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(data=donnees%>%subset(nb>min_affiche*total), aes(x=nb, y=parametre, label=nb),stat='identity',position=position_fill(vjust=0.5))
#' @param min_affiche : pourcentage minimum à atteindre pour que la valeur soit affiché (ex si min_affiche=0.3, seules le nb de prélèvements représentant au moins 30% pour une categorie et un paramètre sera affiché)
#' @return la fonction renvoie un objet ggplot avec le graphique de distribution
#'
#' @examples donnees<-data.frame(parametres=rep(c("1301", "1340", "1335"), 100), RsAna=sample(0.1:100, 300, replace=TRUE), LqAna=c(0.5,1,6))
#' @examples donnees<-donnees%>%mutate(RsAna=ifelse(RsAna<LqAna, LqAna, RsAna))
#' @examples donnees<-donnees%>%mutate(CdRqAna=ifelse(RsAna>LqAna, "1", ifelse(sample(1:100,5)>10,"10","1")))
#' @examples seuils<-makeSeuils(CdParametre=donnees$parametres%>%unique, specificites=c("CYPRINICOLE", rep(NA,2)), type_seuil = "DCE")
#' @examples tableau<-groupe_tableau_distribution(donnees, col_CdParametre="parametres", col_CdSupport=NULL, col_CdFraction=NULL, col_CdUnite=NULL, seuils = seuils)
#' @examples graphDCE_distribution(tableau)
#' @export
graphDCE_distribution<-function(donnees, titre="", legende_LQ=c("NON QUANTIFIE", "QUANTIFIE"), affiche_valeurs=T, min_affiche=0.1){
# creation d'un tableau de correspondance CATEGORIE - LEGENDE
cat_leg<-donnees%>%select(CLASSE, NOM_COULEUR)%>%distinct%>%arrange(CLASSE)
# ajout d'une colonne pour savoir si on doit afficher les étiquettes de valeurs
seuil_param<-donnees%>%group_by(parametre)%>%dplyr::summarise(total=sum(nb))
donnees<-donnees%>%left_join(seuil_param, by="parametre")
graph<-ggplot(donnees, aes(x=nb, y=parametre, fill=CLASSE, alpha=ALPHA%>%as.factor))+
geom_bar(position="fill", stat="identity") + scale_alpha_manual(values=c(0.20, 1), labels=legende_LQ) +
scale_fill_manual(labels=cat_leg$CLASSE, values=cat_leg$NOM_COULEUR)+
scale_x_continuous(labels = scales::percent) +
labs(title = titre, x = "", y = "", alpha = "QUANTIFICATION") +
geom_text(data=donnees%>%subset(nb>min_affiche*total), aes(x=nb, y=parametre, label=nb),stat='identity',position=position_fill(vjust=0.5))
return(graph)
}
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée")
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée", affiche_valeurs = 0.05)
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée", min_affiche=0.05)
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée", min_affiche=0.01)
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée", min_affiche=0.1)
graphDCE_distribution(bilan, titre="Bilan par paramètre dans l'eau distribuée", min_affiche=0.05)
library(tools4DCE)
library(tools4DCE)
library(tools4DCE)
source('~/R_Anthony/AEP/taux_de_quantif_dans_donnees_GESEAU.R', encoding = 'UTF-8', echo=TRUE)
library(tools4DCE)
source('~/R_Anthony/AEP/taux_de_quantif_dans_donnees_GESEAU.R', encoding = 'UTF-8', echo=TRUE)
library(tools4DCE)
liste_pest_2020_ARS56 <- readRDS("~/R_Anthony/AEP/liste_pest_2020_ARS56.rds")
View(liste_pest_2020_ARS56)
library(openxlsx)
liste_pest_2020_ARS56
listeARS<-data.frame(NOM=liste_pest_2020_ARS56$LbCourtParametre,
SUPPORT="3",
FRACTION="23",
UNITE="133",
)
listeARS<-data.frame(NOM=liste_pest_2020_ARS56$LbCourtParametre,
SUPPORT="3",
FRACTION="23",
UNITE="133"
)
listeARS<-data.frame(NOM=liste_pest_2020_ARS56$LbCourtParametre,
SUPPORT="3",
FRACTION="23",
UNITE="133",
TYPE="AEP"
)
expression("P(X\u2264x)")
print(expression("P(X\u2264x)"))
as.character(expression("P(X\u2264x)"))
fusion<-data.frame(TYPE="AEP", SEUILMIN=-Inf, SEUILMAX=0.1, CLASSE="\u2264seuil eau distribuée", )
fusion<-data.frame(TYPE="AEP", SEUILMIN=-Inf, SEUILMAX=0.1, CLASSE=expression("\u2264seuil eau distribuée"), )
fusion<-data.frame(TYPE="AEP", SEUILMIN=-Inf, SEUILMAX=0.1, CLASSE=expression("\u2264seuil eau distribuée"))
expression("\u2264seuil eau distribuée")
fusion<-data.frame(TYPE="AEP", SEUILMIN=-Inf, SEUILMAX=0.1, CLASSE=as.character(expression("\u2264seuil eau distribuée")))
fusion
fusion<-data.frame(TYPE="AEP", SEUILMIN=-Inf, SEUILMAX=0.1, CLASSE=as.character("\u2264seuil eau distribuée"))
fusion
fusion<-data.frame(TYPE="AEP", SEUILMIN=-Inf, SEUILMAX=0.1, CLASSE=as.character("< ou = seuil eau distribuée"))
fusion
listeARS<-left_join(listeARS, fusion, by="TYPE")
listeARS
listeARS<-data.frame(NOM=liste_pest_2020_ARS56$LbCourtParametre,
SUPPORT="3",
FRACTION="23",
UNITE="133",
TYPE="AEP"
)
fusion<-data.frame(TYPE="AEP", SEUILMIN=c(-Inf, 0.1, 2), SEUILMAX=c(0.1,2, +Inf), CLASSE=as.character("< ou = seuil eau distribuée"))
listeARS<-left_join(listeARS, fusion, by="TYPE")
listeARS
fusion<-data.frame(TYPE="AEP", SEUILMIN=c(-Inf, 0.1, 2), SEUILMAX=c(0.1,2, +Inf),
CLASSE=c("< ou = seuil distribution",
">seuil distribution et < ou = seuil potabilisation",
">seuil potabilisation"))
listeARS<-data.frame(NOM=liste_pest_2020_ARS56$LbCourtParametre,
SUPPORT="3",
FRACTION="23",
UNITE="133",
TYPE="AEP"
)
fusion<-data.frame(TYPE="AEP", SEUILMIN=c(-Inf, 0.1, 2), SEUILMAX=c(0.1,2, +Inf),
CLASSE=c("< ou = seuil distribution",
">seuil distribution et < ou = seuil potabilisation",
">seuil potabilisation"))
listeARS<-left_join(listeARS, fusion, by="TYPE")
listeARS
View(listeARS)
listeARS<-data.frame(NOM=liste_pest_2020_ARS56$LbCourtParametre,
SUPPORT="3",
FRACTION="23",
PARAMETRE=liste_pest_2020_ARS56$CdParametre,
UNITE="133",
TYPE="AEP"
)
fusion<-data.frame(TYPE="AEP", SEUILMIN=c(-Inf, 0.1, 2), SEUILMAX=c(0.1,2, +Inf),
CLASSE=c("< ou = seuil distribution",
">seuil distribution et < ou = seuil potabilisation",
">seuil potabilisation"))
listeARS<-left_join(listeARS, fusion, by="TYPE")
View(listeARS)
View(liste_pest_2020_ARS56)
# remplacement du seuil 0,1 par 0,03 pour Aldrine, dieldrine, heptachlore, Heptachlorépoxyde
liste_spec<-c("1103", "1173", "1198", "1197")
listeARS[listeARS$PARAMETRE%in%liste_spec,]
View(listeARS)
View(liste_pest_2020_ARS56)
library(readxl)
library(tidyverse)
# Chargement de la table paramètres du SANDRE
Parametres_sandre <- readRDS("~/R_Anthony/Naiades/bdd_locale/Parametres_sandre.rds")%>%
select(CdParametre, CdCASSubstanceChimique, LbCourtParametre, NomParametre, StParametre)
ineris<-read_xlsx("C:\\Users\\anthony.deburghrave\\OneDrive - EPTB Vilaine\\Documents\\R_Anthony\\AEP\\correspondance_CAS_SANDRE\\DRC-18-158732-03350A_NQE-VGE_INERIS_v20180416.xlsx",
sheet = "Toutes valeurs seuils_201804")
ARS56<-read_xlsx("C:\\Users\\anthony.deburghrave\\OneDrive - EPTB Vilaine\\Documents\\R_Anthony\\AEP\\ARS\\2017-2020-ListePhyto-MPCS.xlsx", skip=2)
names(ARS56)<-gsub("\\r\\n","_",names(ARS56))
# ajout des codes SANDRE correspondants
ARS56<-left_join(ARS56, Parametres_sandre%>%subset(StParametre=="Validé"), by=c("Code_CAS"="CdCASSubstanceChimique"), na_matches="never")
ARS56<-left_join(ARS56, Parametres_sandre%>%subset(StParametre=="Gelé"), by=c("Code_CAS"="CdCASSubstanceChimique"), na_matches="never", suffix=c("", "_gelé"))
ARS56$Paramètre<-gsub("é|è","e", ARS56$Paramètre)%>%tolower
ARS56$NomParametre<-gsub("é|è","e", ARS56$NomParametre)%>%tolower
ARS56$nom_identique<-ifelse(ARS56$NomParametre==ARS56$Paramètre, T, F)
# complétude ddes codes sandre manquants
# on supprime pest total qui sera recalculé ensuite ARS56<-ARS56 %>% mutate(CdParametre = ifelse(Paramètre=="total des pesticides analyses", "6276", CdParametre))
ARS56<-ARS56 %>% mutate(CdParametre = ifelse(Paramètre=="hch alpha+beta+delta+gamma", "5537", CdParametre))
ARS56<-ARS56 %>% mutate(CdParametre = ifelse(Paramètre=="glufosinate-ammonium", "2731", CdParametre))
ARS56<-ARS56 %>% mutate(CdParametre = ifelse(Paramètre=="heptachlore epoxide", "1198", CdParametre))
# suppression des lignes vides
ARS56<-ARS56[!is.na(ARS56$CdParametre),]
# sauvegarde du fichier
saveRDS(file="liste_pest_2020_ARS56.rds", ARS56%>%select(`Famille de paramètres`, LbCourtParametre, CdParametre, Code_CAS, Unité, PEST, PEST1))
library(tools4DCE)
library(openxlsx)
liste_pest_2020_ARS56 <- readRDS("~/R_Anthony/AEP/liste_pest_2020_ARS56.rds")
View(liste_pest_2020_ARS56)
source('~/R_Anthony/tools4DCE/tables_ref/mise en forme des tables de reference vers le package.R', encoding = 'UTF-8', echo=TRUE)
warnings()
View(base_seuils)
library(tools4DCE)
setSeuils(nom_parametre="parametre test",nom_seuil="AM 25 janv 2010",type_seuil="DCE", code_parametre="1301", synonymes_parametre = "1301",support="3",code_unite="27", seuils=tools4DCE::base_seuils%>%subset(NOM=="TEMPERATURE" & SPECIFICITE=="CYPRINICOLE")%>%left_join(couleurs_classes, by=c("CLASSE", "TYPE"))%>%select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)%>%mutate_at("CLASSE", factor),bornesinfinclue=T)
tmp<-makeSeuils()
tmp[100]
test<-makeSeuils(CdParametre=c("1340", "1301"), specificites=c(NA, "CYPRINICOLE"), type_seuil = "DCE")
return(test)
print(test)
library(tools4DCE)
load("~/R_Anthony/tools4DCE/data/base_seuils.RData")
View(base_seuils)
source('~/R_Anthony/tools4DCE/tables_ref/mise en forme des tables de reference vers le package.R', encoding = 'UTF-8', echo=TRUE)
library(tools4DCE)
donnees<-data.frame(code=c("1301", "1302", "1303"))
devtools::use_data(parametres_sandre)
source('~/R_Anthony/tools4DCE/tables_ref/mise en forme des tables de reference vers le package.R', encoding = 'UTF-8', echo=TRUE)
sandre_param<-data(parametres_SANDRE)%>%select(CdParametre, ifelse(type_nom="long", NomParametre, LbCourtParametre))
library(devtools)
source('~/R_Anthony/tools4DCE/tables_ref/mise en forme des tables de reference vers le package.R', encoding = 'UTF-8', echo=TRUE)
usethis::use_data(parametres_sandre)
usethis::use_data(parametres_sandre, overwrite=T)
source('~/R_Anthony/tools4DCE/tables_ref/mise en forme des tables de reference vers le package.R', encoding = 'UTF-8', echo=TRUE)
type_nom="long"
sandre_param<-data(parametres_sandre)%>%select(CdParametre, ifelse(type_nom="long", NomParametre, LbCourtParametre))
sandre_param<-data(parametres_sandre)%>%select(CdParametre, vars(ifelse(type_nom="long", NomParametre, LbCourtParametre)))
library(tools4DCE)
type_nom="long"
sandre_param<-data(parametres_sandre)%>%select(CdParametre, vars(ifelse(type_nom="long", NomParametre, LbCourtParametre)))
sandre_param<-data(parametres_sandre)
sandre_param<-data(parametres_sandre)%>%select(CdParametre)
sandre_param<-data(parametres_sandre)%>%select("CdParametre")
data(parametres_sandre)
sandre_param<-data("parametres_sandre")
tools4DCE::data(parametres_sandre)
sandre_param<-data(tools4DCE::parametres_sandre)%>%select("CdParametre")
sandre_param<-data("parametres_sandre", package="tools4DCE")
load("~/R_Anthony/tools4DCE/data/parametres_sandre.RData")
library(tools4DCE)
sandre_param<-data("parametres_sandre", package="tools4DCE")
sandre_param<-data(parametres_sandre, package="tools4DCE")
sandre_param<-data("couleurs_classes", package="tools4DCE")
data("couleurs_classes", package="tools4DCE")
sandre_param<-data(couleurs_classes, package="tools4DCE")
couleurs_classes
sandre_param<-data(parametres_sandre, package="tools4DCE")
sandre_param
parametres_sandre<-data(parametres_sandre, package="tools4DCE")
data(parametres_sandre, package="tools4DCE")
sandre_param<-parametres_sandre%>%select(CdParametre, vars(ifelse(type_nom="long", NomParametre, LbCourtParametre)))
type_nom="long"
sandre_param<-parametres_sandre%>%select(CdParametre, vars(ifelse(type_nom="long", NomParametre, LbCourtParametre)))
vars(ifelse(type_nom="long", NomParametre, LbCourtParametre)
)
sandre_param<-parametres_sandre%>%select(CdParametre)
data(parametres_sandre, package="tools4DCE")
sandre_param<-parametres_sandre%>%select(CdParametre)
colonne<-ifelse(type_nom="long", "NomParametre", "LbCourtParametre")
colonne<-ifelse(type_nom=="long", "NomParametre", "LbCourtParametre")
sandre_param<-parametres_sandre%>%select(CdParametre, vars(colonne))
vars(colonne)
sandre_param<-parametres_sandre%>%select(CdParametre, matches(colonne))
View(sandre_param)
sandre_param<-parametres_sandre%>%select(CdParametre, ends_with(colonne))
View(sandre_param)
library(tools4DCE)
library(tools4DCE)
donnees<-data.frame(code=c("1301", "1302", "1303"))
ajoute_nom_param(donnees, col_parametre="code")
test<-data.frame(CdParametre=c("1335", "1340"))
ajoute_nom_param(test)
test<-data.frame(CdParametre2=c("1335", "1340"))
ajoute_nom_param(test, col_parametre="CdParametre2")
ajoute_nom_param<-function(x, col_parametre="CdParametre", type_nom="long"){
data(parametres_sandre, package="tools4DCE")
colonne<-ifelse(type_nom=="long", "NomParametre", "LbCourtParametre")
parametres_sandre<-parametres_sandre%>%select(CdParametre, ends_with(colonne))
return(left_join(x,parametres_sandre, by=c(col_parametre="CdParametre")))}
ajoute_nom_param(test, col_parametre="CdParametre2")
jointure<-paste0("'",col_parametre,"'='CdParametre'")
col_parametre="CdParametre"
jointure<-paste0("'",col_parametre,"'='CdParametre'")
jointure
ajoute_nom_param<-function(x, col_parametre="CdParametre", type_nom="long"){
data(parametres_sandre, package="tools4DCE")
colonne<-ifelse(type_nom=="long", "NomParametre", "LbCourtParametre")
parametres_sandre<-parametres_sandre%>%select(CdParametre, ends_with(colonne))
jointure<-paste0("'",col_parametre,"'='CdParametre'")
return(left_join(x,parametres_sandre, by=jointure))}
ajoute_nom_param(test, col_parametre="CdParametre2")
ajoute_nom_param<-function(x, col_parametre="CdParametre", type_nom="long"){
data(parametres_sandre, package="tools4DCE")
colonne<-ifelse(type_nom=="long", "NomParametre", "LbCourtParametre")
parametres_sandre<-parametres_sandre%>%select(CdParametre, ends_with(colonne))
return(left_join(x,parametres_sandre, by=setNames(col_parametre="CdParametre")))}
ajoute_nom_param(test, col_parametre="CdParametre2")
test<-data.frame(CdParametre2=c("1335", "1340"))
ajoute_nom_param(test, col_parametre="CdParametre2")
ajoute_nom_param<-function(x, col_parametre="CdParametre", type_nom="long"){
data(parametres_sandre, package="tools4DCE")
colonne<-ifelse(type_nom=="long", "NomParametre", "LbCourtParametre")
parametres_sandre<-parametres_sandre%>%select(CdParametre, ends_with(colonne))
return(left_join(x,parametres_sandre, by=setNames(col_parametre,"CdParametre")))}
ajoute_nom_param(test, col_parametre="CdParametre2")
ajoute_nom_param<-function(x, col_parametre="CdParametre", type_nom="long"){
data(parametres_sandre, package="tools4DCE")
colonne<-ifelse(type_nom=="long", "NomParametre", "LbCourtParametre")
parametres_sandre<-parametres_sandre%>%select(CdParametre, ends_with(colonne))
return(left_join(x,parametres_sandre, by=setNames(col_parametre,"CdParametre")))}
ajoute_nom_param(test, col_parametre="CdParametre2")
rlang::last_error()
setNames(col_parametre,"CdParametre")
rm(col_parametre)
ajoute_nom_param<-function(x, col_parametre="CdParametre", type_nom="long"){
data(parametres_sandre, package="tools4DCE")
colonne<-ifelse(type_nom=="long", "NomParametre", "LbCourtParametre")
parametres_sandre<-parametres_sandre%>%select(CdParametre, ends_with(colonne))
return(left_join(x,parametres_sandre, by=setNames(col_parametre,"CdParametre")))}
ajoute_nom_param(test, col_parametre="CdParametre2")
ajoute_nom_param<-function(x, col_parametre="CdParametre", type_nom="long"){
print(col_parametre)
data(parametres_sandre, package="tools4DCE")
colonne<-ifelse(type_nom=="long", "NomParametre", "LbCourtParametre")
parametres_sandre<-parametres_sandre%>%select(CdParametre, ends_with(colonne))
return(left_join(x,parametres_sandre, by=setNames(col_parametre,"CdParametre")))}
ajoute_nom_param(test, col_parametre="CdParametre2")
ajoute_nom_param<-function(x, col_parametre="CdParametre", type_nom="long"){
data(parametres_sandre, package="tools4DCE")
colonne<-ifelse(type_nom=="long", "NomParametre", "LbCourtParametre")
parametres_sandre<-parametres_sandre%>%select(CdParametre, ends_with(colonne))
return(left_join(x,parametres_sandre, by=setNames("CdParametre", col_parametre)))}
ajoute_nom_param(test, col_parametre="CdParametre2")
ajoute_nom_param(donnees, col_parametre="code")
donnees<-data.frame(code=c("1301", "1401", "1303"))
ajoute_nom_param(donnees, col_parametre="code")
donnees<-data.frame(code=c("1301", "1302", "1303"))
ajoute_nom_param(donnees, col_parametre="code")
library(tools4DCE)
library(tools4DCE)
library(tools4DCE)
library(tools4DCE)
library(tools4DCE)
setSeuils(nom_parametre="parametre test",nom_seuil="AM 25 janv 2010",type_seuil="DCE", code_parametre="1301", synonymes_parametre = "1301",support="3",code_unite="27", seuils=tools4DCE::base_seuils%>%subset(NOM=="TEMPERATURE" & SPECIFICITE=="CYPRINICOLE")%>%left_join(couleurs_classes, by=c("CLASSE", "TYPE"))%>%select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)%>%mutate_at("CLASSE", factor),bornesinfinclue=T)
tmp<-makeSeuils()
tmp[100]
test<-makeSeuils(CdParametre=c("1340", "1301"), specificites=c(NA, "CYPRINICOLE"), type_seuil = "DCE")
print(test)
liste_des_seuils<-lapply(makeSeuils(), function(x) `@`( x , nom_parametre)[[1]])%>%unlist%>%sort%>%unique
data0<-data.frame(DatePrel=Sys.Date() + sort(sample(1:500, 30)), RsAna=c(round(runif(30,0,100), 0)), LqAna=c(3))
graphDCE_points(data0, seuils=makeSeuils(CdParametre = "1340", type_seuil="DCE"), affiche_LQ = T, ymini = 0)
graphDCE_points(data0, seuils=makeSeuils(CdParametre = "1340", type_seuil="DCE"), affiche_LQ = T, ymini = 0, ymaxi=90)
data0[10,"RsAna"]<-800
graphDCE_points(data0, seuils=makeSeuils(CdParametre = "1340", type_seuil="DCE"), affiche_LQ = T, ymini = 0)
data<-data.frame(annee=seq(2010,2013), RsAna=c(12,15.5,67,18.3))
graphDCE_bar(data, seuils=makeSeuils(CdParametre = "1340", type_seuil="DCE"),ymaxi=60)
library(tools4DCE)
install.packages("sinew")
test<-function(x,y,z){paste(x,y,z)}
test<-function(x,y,z){paste(x,y,z)}
makeOxygen(test)
library(sinew)
makeOxygen(test)
download_intervenants_sandre<-function(output){
download.file("https://api.sandre.eaufrance.fr/referentiels/v1/int.csv?compress=true", "tmp/intervenants.csv.gz", mode="wb", cacheOK = T)
Intervenants<-read_delim("tmp/intervenants.csv.gz",delim=";", skip=1)
Intervenants$`Code de l'intervenant`<-Intervenants$`Code de l'intervenant`%>%as.character
saveRDS(Intervenants, output)}
makeOxygen(download_intervenants_sandre)
download_intervenants_sandre<-function(output){
download.file("https://api.sandre.eaufrance.fr/referentiels/v1/int.csv?compress=true", "tmp/intervenants.csv.gz", mode="wb", cacheOK = T)
Intervenants<-read_delim("tmp/intervenants.csv.gz",delim=";", skip=1)
Intervenants$`Code de l'intervenant`<-Intervenants$`Code de l'intervenant`%>%as.character
saveRDS(Intervenants, output)}
makeOxygen(download_intervenants_sandre)
