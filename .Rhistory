na_matches = "na"
)
}
# on ajoute une colonne NOM_COULEUR à la base_seuils
base_seuils <-
base_seuils %>% left_join(couleurs_classes, by = c("CLASSE", "TYPE"))
# ajout des levels pour les classes de la base seuil
base_seuils$CLASSE <-
factor(base_seuils$CLASSE, levels = ordre_facteurs_qualite[, "CLASSE"])
# on applique deux types d'arguments à la fonction setSeuils
# les arguments NOM, NOM_SEUIL, TYPE, sont passés un par un
# au premier passage le premier NOM, le premier seuil....
# il faut aussi passer le tableau (qui lui reste le même) dans MoreArg
liste_seuils <-mapply(setSeuils,
nom_parametre = base_seuils$NOM,
nom_seuil = base_seuils$NOM_SEUIL,
type_seuil = base_seuils$TYPE,
code_parametre = base_seuils$PARAMETRE,
synonymes_parametre =
base_seuils$SYNONYMES,
support = base_seuils$SUPPORT,
fraction = base_seuils$FRACTION,
code_unite = base_seuils$UNITE,
bornesinfinclue = ifelse(base_seuils$TYPE_BORNE =="BORNE_INF_INCLUE", T, F),
specificites = base_seuils$SPECIFICITE,
MoreArgs = list(seuils = data.frame(base_seuils %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)))
)
View(liste_seuils)
return(liste_seuils)
library(tools4DCE)
library(tools4DCE)
setSeuils(nom_parametre="parametre test",nom_seuil="AM 25 janv 2010",type_seuil="DCE", code_parametre="1301", synonymes_parametre = "1301",support="3",code_unite="27", seuils=tools4DCE::base_seuils%>%subset(NOM=="TEMPERATURE" & SPECIFICITE=="CYPRINICOLE")%>%left_join(couleurs_classes, by=c("CLASSE", "TYPE"))%>%select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)%>%mutate_at("CLASSE", factor),bornesinfinclue=T)
tmp<-makeSeuils()
tmp[100]
test<-makeSeuils(CdParametre=c("1340", "1301"), specificites=c(NA, "CYPRINICOLE"), type_seuil = "DCE")
print(test)
liste_des_seuils<-lapply(makeSeuils(), function(x) `@`( x , nom_parametre)[[1]])%>%unlist%>%sort%>%unique
data0<-data.frame(DatePrel=Sys.Date() + sort(sample(1:500, 30)), RsAna=c(round(runif(30,0,100), 0)), LqAna=c(3))
graphDCE_points(data0, seuils=makeSeuils(CdParametre = "1340", type_seuil="DCE"), affiche_LQ = T, ymini = 0)
makeSeuils(CdParametre = "1340", type_seuil="DCE")
makeSeuils(CdParametre = "1340", type_seuil="DCE")
seuils=makeSeuils(CdParametre = "1340", type_seuil="DCE")
View(seuils)
test
View(test)
library(tools4DCE)
setSeuils(nom_parametre="parametre test",nom_seuil="AM 25 janv 2010",type_seuil="DCE", code_parametre="1301", synonymes_parametre = "1301",support="3",code_unite="27", seuils=tools4DCE::base_seuils%>%subset(NOM=="TEMPERATURE" & SPECIFICITE=="CYPRINICOLE")%>%left_join(couleurs_classes, by=c("CLASSE", "TYPE"))%>%select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)%>%mutate_at("CLASSE", factor),bornesinfinclue=T)
tmp<-makeSeuils()
tmp<-makeSeuils()
tmp[100]
tmp<-makeSeuils()
View(tmp)
View(tmp)
library(tools4DCE)
library(tools4DCE)
setSeuils(nom_parametre="parametre test",nom_seuil="AM 25 janv 2010",type_seuil="DCE", code_parametre="1301", synonymes_parametre = "1301",support="3",code_unite="27", seuils=tools4DCE::base_seuils%>%subset(NOM=="TEMPERATURE" & SPECIFICITE=="CYPRINICOLE")%>%left_join(couleurs_classes, by=c("CLASSE", "TYPE"))%>%select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)%>%mutate_at("CLASSE", factor),bornesinfinclue=T)
tmp<-makeSeuils()
View(tmp)
CdParametre = NULL
CdSupport = NULL
CdFraction = NULL
CdUnite = NULL
type_seuil = NULL
specificites = NULL
# chargement des données du package
base_seuils <- tools4DCE::base_seuils
couleurs_classes <- tools4DCE::couleurs_classes
ordre_facteurs_qualite <- tools4DCE::ordre_facteurs_qualite
# on duplique les lignes de base_seuils pour lesquelles il existe des synonymes
base_seuils$SYNONYMES <- base_seuils$PARAMETRE
base_seuils$PARAMETRE <-
gsub(" ", "", base_seuils$PARAMETRE) # suppression des éventuels espaces
base_seuils <-
base_seuils %>% separate(
PARAMETRE,
sep = "\\|",
into = paste("PARAMETRE", seq(1:20), sep = ""),
fill = "right"
)
base_seuils <-
base_seuils %>% pivot_longer(
cols = PARAMETRE1:PARAMETRE20,
values_to = "PARAMETRE",
values_drop_na = T
)
seuils_demandes <-
tibble::tibble(.rows = max(
length(CdParametre),
length(CdSupport),
length(CdFraction),
length(CdUnite),
length(type_seuil),
length(specificites)
))
if (!is.null(CdParametre)) {
seuils_demandes <-
seuils_demandes %>% mutate(PARAMETRE = CdParametre)
}
if (!is.null(CdSupport)) {
seuils_demandes <- seuils_demandes %>% mutate(SUPPORT = CdSupport)
}
if (!is.null(type_seuil)) {
seuils_demandes <- seuils_demandes %>% mutate(TYPE = type_seuil)
}
if (!is.null(specificites)) {
seuils_demandes <-
seuils_demandes %>% mutate(SPECIFICITE = specificites)
}
if (!is.null(CdFraction)) {
seuils_demandes <- seuils_demandes %>% mutate(FRACTION = CdFraction)
}
if (!is.null(CdUnite)) {
seuils_demandes <- seuils_demandes %>% mutate(UNITE = CdUnite)
}
# jointure uniquement sur les colonnes renseignées
if (nrow(seuils_demandes) > 0) {
base_seuils <-
inner_join(
base_seuils,
seuils_demandes,
by = names(seuils_demandes),
na_matches = "na"
)
}
# on ajoute une colonne NOM_COULEUR à la base_seuils
base_seuils <-
base_seuils %>% left_join(couleurs_classes, by = c("CLASSE", "TYPE"))
# ajout des levels pour les classes de la base seuil
base_seuils$CLASSE <-
factor(base_seuils$CLASSE, levels = ordre_facteurs_qualite[, "CLASSE"])
View(base_seuils)
seuils = data.frame(base_seuils %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR))
View(seuils)
test<-makeSeuils(CdParametre=c("1340", "1301"), specificites=c(NA, "CYPRINICOLE"), type_seuil = "DCE")
View(test)
View(base_seuils)
View(base_seuils)
CdParametre = NULL
CdSupport = NULL
CdFraction = NULL
CdUnite = NULL
type_seuil = NULL
specificites = NULL
# chargement des données du package
base_seuils <- tools4DCE::base_seuils
couleurs_classes <- tools4DCE::couleurs_classes
ordre_facteurs_qualite <- tools4DCE::ordre_facteurs_qualite
# on duplique les lignes de base_seuils pour lesquelles il existe des synonymes
base_seuils$SYNONYMES <- base_seuils$PARAMETRE
base_seuils$PARAMETRE <-
gsub(" ", "", base_seuils$PARAMETRE) # suppression des éventuels espaces
base_seuils <-
base_seuils %>% separate(
PARAMETRE,
sep = "\\|",
into = paste("PARAMETRE", seq(1:20), sep = ""),
fill = "right"
)
library(tools4DCE)
base_seuils <-
base_seuils %>% separate(
PARAMETRE,
sep = "\\|",
into = paste("PARAMETRE", seq(1:20), sep = ""),
fill = "right"
)
base_seuils <-
base_seuils %>% pivot_longer(
cols = PARAMETRE1:PARAMETRE20,
values_to = "PARAMETRE",
values_drop_na = T
)
seuils_demandes <-
tibble::tibble(.rows = max(
length(CdParametre),
length(CdSupport),
length(CdFraction),
length(CdUnite),
length(type_seuil),
length(specificites)
))
if (!is.null(CdParametre)) {
seuils_demandes <-
seuils_demandes %>% mutate(PARAMETRE = CdParametre)
}
if (!is.null(CdSupport)) {
seuils_demandes <- seuils_demandes %>% mutate(SUPPORT = CdSupport)
}
if (!is.null(type_seuil)) {
seuils_demandes <- seuils_demandes %>% mutate(TYPE = type_seuil)
}
if (!is.null(specificites)) {
seuils_demandes <-
seuils_demandes %>% mutate(SPECIFICITE = specificites)
}
if (!is.null(CdFraction)) {
seuils_demandes <- seuils_demandes %>% mutate(FRACTION = CdFraction)
}
if (!is.null(CdUnite)) {
seuils_demandes <- seuils_demandes %>% mutate(UNITE = CdUnite)
}
# jointure uniquement sur les colonnes renseignées
if (nrow(seuils_demandes) > 0) {
base_seuils <-
inner_join(
base_seuils,
seuils_demandes,
by = names(seuils_demandes),
na_matches = "na"
)
}
# on ajoute une colonne NOM_COULEUR à la base_seuils
base_seuils <-
base_seuils %>% left_join(couleurs_classes, by = c("CLASSE", "TYPE"))
# ajout des levels pour les classes de la base seuil
base_seuils$CLASSE <-
factor(base_seuils$CLASSE, levels = ordre_facteurs_qualite[, "CLASSE"])
i<-1
base_seuils[1,]
data.frame(base_seuils %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR))
data.frame(base_seuils[1,] %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR))
list(seuils = data.frame(base_seuils %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR))
return(liste_seuils)
}
list(seuils = data.frame(base_seuils %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)))
View(base_seuils)
test<-makeSeuils(CdParametre=c("1340", "1301"), specificites=c(NA, "CYPRINICOLE"), type_seuil = "DCE")
test
View(test)
View(base_seuils)
View(base_seuils)
# liste des seuils
liste_seuil<-data.frame(base_seuils %>% select(!c(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)))
View(liste_seuil)
# liste des seuils
liste_seuils<-data.frame(base_seuils %>% select(!c(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)))%>%distinct
names(ensemble_seuils)
# ensemble des seuils
ensemble_seuils<-data.frame(base_seuils %>% select(!c(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR)))%>%distinct
names(ensemble_seuils)
names(ensemble_seuils)
# création d'une liste avec les seuils correspondants à chaque ligne de ensemble seuils
valeurs_seuils <-
mapply(function(NOM,
SUPPORT,
FRACTION,
UNITE,
NOM_SEUIL,
TYPE,
TYPE_BORNE,
SPECIFICITE,
SYNONYMES,
name,
PARAMETRE) {
data.frame(
base_seuils %>% subset(
NOM == NOM &
SUPPORT == SUPPORT &
FRACTION == FRACTION &
UNITE == UNITE &
NOM_SEUIL == NOM_SEUIL &
TYPE == TYPE &
TYPE_BORNE == TYPE_BORNE &
SPECIFICITE == SPECIFICITE &
SYNONYMES == SYNONYMES &
name == name &
PARAMETRE == PARAMETRE
) %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR) %>%distinct
)
},
ensemble_seuils$NOM,
ensemble_seuils$SUPPORT,
ensemble_seuils$FRACTION,
ensemble_seuils$UNITE,
ensemble_seuils$NOM_SEUIL,
ensemble_seuils$TYPE,
ensemble_seuils$TYPE_BORNE,
ensemble_seuils$SPECIFICITE,
ensemble_seuils$SYNONYMES,
ensemble_seuils$name,
ensemble_seuils$PARAMETRE
)
View(valeurs_seuils)
# création d'une liste avec les seuils correspondants à chaque ligne de ensemble seuils
valeurs_seuils <-
mapply(function(NOM,
SUPPORT,
FRACTION,
UNITE,
NOM_SEUIL,
TYPE,
TYPE_BORNE,
SPECIFICITE,
SYNONYMES,
name,
PARAMETRE) {
list(data.frame(
base_seuils %>% subset(
NOM == NOM &
SUPPORT == SUPPORT &
FRACTION == FRACTION &
UNITE == UNITE &
NOM_SEUIL == NOM_SEUIL &
TYPE == TYPE &
TYPE_BORNE == TYPE_BORNE &
SPECIFICITE == SPECIFICITE &
SYNONYMES == SYNONYMES &
name == name &
PARAMETRE == PARAMETRE
) %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR) %>%distinct
))
},
ensemble_seuils$NOM,
ensemble_seuils$SUPPORT,
ensemble_seuils$FRACTION,
ensemble_seuils$UNITE,
ensemble_seuils$NOM_SEUIL,
ensemble_seuils$TYPE,
ensemble_seuils$TYPE_BORNE,
ensemble_seuils$SPECIFICITE,
ensemble_seuils$SYNONYMES,
ensemble_seuils$name,
ensemble_seuils$PARAMETRE
)
View(valeurs_seuils)
# création d'une liste avec les seuils correspondants à chaque ligne de ensemble seuils
valeurs_seuils <-
mapply(function(NOM0,
SUPPORT0,
FRACTION0,
UNITE0,
NOM_SEUIL0,
TYPE0,
TYPE_BORNE0,
SPECIFICITE0,
SYNONYMES0,
name0,
PARAMETRE0) {
list(data.frame(
base_seuils %>% subset(
NOM == NOM0 &
SUPPORT == SUPPORT0 &
FRACTION == FRACTION0 &
UNITE == UNITE0 &
NOM_SEUIL == NOM_SEUIL0 &
TYPE == TYPE0 &
TYPE_BORNE == TYPE_BORNE0 &
SPECIFICITE == SPECIFICITE0 &
SYNONYMES == SYNONYMES0 &
name == name0 &
PARAMETRE == PARAMETRE0
) %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR) %>%distinct
))
},
ensemble_seuils$NOM,
ensemble_seuils$SUPPORT,
ensemble_seuils$FRACTION,
ensemble_seuils$UNITE,
ensemble_seuils$NOM_SEUIL,
ensemble_seuils$TYPE,
ensemble_seuils$TYPE_BORNE,
ensemble_seuils$SPECIFICITE,
ensemble_seuils$SYNONYMES,
ensemble_seuils$name,
ensemble_seuils$PARAMETRE
)
View(liste_seuils)
View(valeurs_seuils)
View(ensemble_seuils)
# création d'une liste avec les seuils correspondants à chaque ligne de ensemble seuils
f_valeurs_seuils<-function(NOM0,
SUPPORT0,
FRACTION0,
UNITE0,
NOM_SEUIL0,
TYPE0,
TYPE_BORNE0,
SPECIFICITE0,
SYNONYMES0,
name0,
PARAMETRE0){data.frame(
base_seuils %>% subset(
NOM == NOM0 &
SUPPORT == SUPPORT0 &
FRACTION == FRACTION0 &
UNITE == UNITE0 &
NOM_SEUIL == NOM_SEUIL0 &
TYPE == TYPE0 &
TYPE_BORNE == TYPE_BORNE0 &
SPECIFICITE == SPECIFICITE0 &
SYNONYMES == SYNONYMES0 &
name == name0 &
PARAMETRE == PARAMETRE0
) %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR) %>%distinct
)}
f_valeurs_seuils(ensemble_seuils$NOM[1],
ensemble_seuils$SUPPORT[1],
ensemble_seuils$FRACTION[1],
ensemble_seuils$UNITE[1],
ensemble_seuils$NOM_SEUIL[1],
ensemble_seuils$TYPE[1],
ensemble_seuils$TYPE_BORNE[1],
ensemble_seuils$SPECIFICITE[1],
ensemble_seuils$SYNONYMES[1],
ensemble_seuils$name[1],
ensemble_seuils$PARAMETRE[1])
ensemble_seuils$PARAMETRE[1]
ensemble_seuils$name[1],
ensemble_seuils$name[1]
ensemble_seuils$SYNONYMES[1]
ensemble_seuils$SPECIFICITE[1]
ensemble_seuils$TYPE_BORNE[1]
ensemble_seuils$TYPE[1]
ensemble_seuils$NOM_SEUIL[1]
f_valeurs_seuils(ensemble_seuils$NOM[1],
ensemble_seuils$SUPPORT[1],
ensemble_seuils$FRACTION[1],
ensemble_seuils$UNITE[1],
ensemble_seuils$NOM_SEUIL[1],
ensemble_seuils$TYPE[1],
ensemble_seuils$TYPE_BORNE[1],
ensemble_seuils$SPECIFICITE[1],
ensemble_seuils$SYNONYMES[1],
ensemble_seuils$name[1],
ensemble_seuils$PARAMETRE[1])
base_seuils
# création d'une liste avec les seuils correspondants à chaque ligne de ensemble seuils
f_valeurs_seuils<-function(NOM0,
SUPPORT0,
FRACTION0,
UNITE0,
NOM_SEUIL0,
TYPE0,
TYPE_BORNE0,
SPECIFICITE0,
SYNONYMES0,
name0,
PARAMETRE0){data.frame(
base_seuils %>% subset(
NOM == NOM0 &
SUPPORT == SUPPORT0 &
FRACTION == FRACTION0 &
UNITE == UNITE0 &
NOM_SEUIL == NOM_SEUIL0 &
TYPE == TYPE0 &
TYPE_BORNE == TYPE_BORNE0 &
SPECIFICITE == SPECIFICITE0 &
SYNONYMES == SYNONYMES0 &
name == name0 &
PARAMETRE == PARAMETRE0
)
)}
f_valeurs_seuils(ensemble_seuils$NOM[1],
ensemble_seuils$SUPPORT[1],
ensemble_seuils$FRACTION[1],
ensemble_seuils$UNITE[1],
ensemble_seuils$NOM_SEUIL[1],
ensemble_seuils$TYPE[1],
ensemble_seuils$TYPE_BORNE[1],
ensemble_seuils$SPECIFICITE[1],
ensemble_seuils$SYNONYMES[1],
ensemble_seuils$name[1],
ensemble_seuils$PARAMETRE[1])
ensemble_seuils$NOM
ensemble_seuils[1,]
base_seuils[1:7,]
NOM0 <- ensemble_seuils$NOM[1]
SUPPORT0 <- ensemble_seuils$SUPPORT[1]
FRACTION0 <-
ensemble_seuils$FRACTION[1]
UNITE0 <- ensemble_seuils$UNITE[1]
NOM_SEUIL0 <- ensemble_seuils$NOM_SEUIL[1]
TYPE0 <- ensemble_seuils$TYPE[1]
TYPE_BORNE0 <- ensemble_seuils$TYPE_BORNE[1]
SPECIFICITE0 <- ensemble_seuils$SPECIFICITE[1]
SYNONYMES0 <- ensemble_seuils$SYNONYMES[1]
name0 <- ensemble_seuils$name[1]
PARAMETRE0 <- ensemble_seuils$PARAMETRE[1]
base_seuils %>% subset(
NOM == NOM0 &
SUPPORT == SUPPORT0 &
FRACTION == FRACTION0 &
UNITE == UNITE0 &
NOM_SEUIL == NOM_SEUIL0 &
TYPE == TYPE0 &
TYPE_BORNE == TYPE_BORNE0 &
SPECIFICITE == SPECIFICITE0 &
SYNONYMES == SYNONYMES0 &
name == name0 &
PARAMETRE == PARAMETRE0
) %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR) %>%distinct
tmp<-base_seuils %>% subset(
NOM == NOM0 &
SUPPORT == SUPPORT0 &
FRACTION == FRACTION0 &
UNITE == UNITE0 &
NOM_SEUIL == NOM_SEUIL0 &
TYPE == TYPE0 &
TYPE_BORNE == TYPE_BORNE0 &
SPECIFICITE == SPECIFICITE0 &
SYNONYMES == SYNONYMES0 &
name == name0 &
PARAMETRE == PARAMETRE0
) %>% select(SEUILMIN, SEUILMAX, CLASSE, NOM_COULEUR) %>%distinct
View(tmp)
NOM0
SUPPORT0
FRACTION0
UNITE0
NOM_SEUIL0
TYPE0
NA==NA
